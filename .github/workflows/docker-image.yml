name: Build, push & deploy Docker image

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PLATFORMS: linux/amd64 #,linux/arm64

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    outputs:
      build_date: ${{ steps.date.outputs.DATE }}
    steps:
    - name: Set timezone
      run: |
        echo "Setting timezone to Budapest"
        sudo timedatectl set-timezone Europe/Budapest

    - name: Set current date and time
      id: date
      run: echo "DATE=$(date +'%Y-%m-%d_%H-%M')" >> $GITHUB_OUTPUT

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # set latest tag for default branch
          type=raw,value=latest,enable={{is_default_branch}}
          # branch event
          type=ref,enable=true,priority=600,prefix=,suffix=,event=branch
          type=raw,value=${{ steps.date.outputs.DATE }},event=branch,enable={{is_default_branch}}
          # tag event
          type=ref,enable=true,priority=600,prefix=,suffix=,event=tag
          # pull request event
          type=ref,enable=true,priority=600,prefix=pr-,suffix=,event=pr
        flavor: |
          latest=auto

    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ env.PLATFORMS }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into registry (${{ env.REGISTRY }})
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push image
      id: build-push
      uses: docker/build-push-action@v6
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./Dockerfile
        platforms: ${{ env.PLATFORMS }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        build-args: |
          BUILD_DATE=${{ steps.date.outputs.DATE }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    env:
      BUILD_DATE: ${{ needs.build-and-push.outputs.build_date }}
    steps:
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Authenticate Tailscale
        run: |
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --accept-routes --hostname github-deployer

      - name: Configure kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > kubeconfig

      - name: Deploy to k3s
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_DATE }}
          IMAGE="${IMAGE,,}"
          KUBECONFIG=$PWD/kubeconfig kubectl set image deployment/embedbot embedbot="$IMAGE"
          KUBECONFIG=$PWD/kubeconfig kubectl annotate deployment/embedbot kubernetes.io/change-cause="Update image to $IMAGE" --overwrite
          KUBECONFIG=$PWD/kubeconfig kubectl rollout status deployment/embedbot

      - name: Send notification
        run: |
          curl \
          -H "Title: GeminiBot Updated" \
          -H "Priority: low" \
          -H "Tags: white_check_mark" \
          -d "GeminiBot version ${{ env.BUILD_DATE }} has been deployed." \
          ${{ secrets.NTFY_TOPIC }} | sed -E 's/("topic"[[:space:]]*:[[:space:]]*)"[^"]*"/\1"[REDACTED]"/'

  notify-build:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && needs.build-and-push.result != 'success' && needs.build-and-push.result != 'skipped'
    steps:
      - name: Send build failure notification
        run: |
          curl \
              -H "Title: GeminiBot Build FAILED" \
              -H "Priority: high" \
              -H "Tags: warning" \
              -H "Click: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              -d "Build ${{ needs.build-and-push.outputs.build_date }} failed (job result: ${{ needs.build-and-push.result }}). See: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} Tap to open." \
              ${{ secrets.NTFY_TOPIC }} | sed -E 's/("topic"[[:space:]]*:[[:space:]]*)"[^"]*"/\1"[REDACTED]"/'

  notify-deploy:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && (needs.deploy.result == 'failure' || needs.deploy.result == 'cancelled')
    steps:
      - name: Send deploy failure notification
        run: |
          curl \
              -H "Title: GeminiBot Deployment FAILED" \
              -H "Priority: high" \
              -H "Tags: warning" \
              -H "Click: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              -d "EmbedBot version ${{ env.BUILD_DATE }} deployment failed. (job result: ${{ needs.deploy.result }}). See: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} Tap to open." \
              ${{ secrets.NTFY_TOPIC }} | sed -E 's/("topic"[[:space:]]*:[[:space:]]*)"[^"]*"/\1"[REDACTED]"/'